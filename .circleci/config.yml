# Golang CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1

workflows:
  build-docker:
    jobs:
      - build:
          context: newrelic-demo # has an env var called MY_ENV_VAR
      - code-scan:
            requires:
              - build
      - unit-test:
            requires:
              - code-scan       
      - package:
            requires:
              - unit-test       
      - functional-test:
            requires:
              - build               
      - integration-test:
            requires:
              - build               
      - deploy:
          requires:
              - build    

jobs:
  build:
    docker:
      # specify the version
      - image: circleci/golang:1.13

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    working_directory: /go/src/github.com/{{ORG_NAME}}/{{REPO_NAME}}
    steps:
      - checkout

      # specify any bash command here prefixed with `run: `
      - run: go get -v -t -d ./...
      - run: go test -v ./...
      - run: go build -o main .

      - setup_remote_docker:
          version: 19.03.8
          docker_layer_caching: false

      # build and push Docker image
      - run: |
          TAG=0.1.$CIRCLE_BUILD_NUM
          docker build -t rekhamitt/circleci-demo-docker:$CIRCLE_SHA1 .
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
          docker push rekhamitt/circleci-demo-docker:$CIRCLE_SHA1
  code-scan:
    docker:
      # specify the version
      - image: circleci/golang:1.13
    working_directory: /go/src/github.com/{{ORG_NAME}}/{{REPO_NAME}}
    steps:
      - checkout

      # specify any bash command here prefixed with `run: `
      - run: echo "Successfull code-scan completed"
  unit-test:
    docker:
      # specify the version
      - image: circleci/golang:1.13
    working_directory: /go/src/github.com/{{ORG_NAME}}/{{REPO_NAME}}
    steps:
      # specify any bash command here prefixed with `run: `
      - run: echo "Starting unit-testing"
      - run: echo "Completed unit-testing"
  package:
    docker:
      # specify the version
      - image: circleci/golang:1.13
    working_directory: /go/src/github.com/{{ORG_NAME}}/{{REPO_NAME}}
    steps:
      # specify any bash command here prefixed with `run: `
      - run: echo "Starting packaging application"
      - run: echo "Completed packaging"
  functional-test:
    docker:
      # specify the version
      - image: circleci/golang:1.13
    working_directory: /go/src/github.com/{{ORG_NAME}}/{{REPO_NAME}}
    steps:
      # specify any bash command here prefixed with `run: `
      - run: echo "Starting functional test"
      - run: echo "Completed functional test"
  integration-test:
    docker:
      # specify the version
      - image: circleci/golang:1.13
    working_directory: /go/src/github.com/{{ORG_NAME}}/{{REPO_NAME}}
    steps:
      # specify any bash command here prefixed with `run: `
      - run: echo "Starting integration test"
      - run: echo "Completed testing"   
  deploy:
    machine:
      enabled: true
    steps:
      - checkout
      - run: echo $ID_RSA > id_rsa && chmod 400 id_rsa
      - run: |
          TAG=0.1.$CIRCLE_BUILD_NUM
          ssh -i id_rsa ec2-user@34.222.229.19 "IMAGE=rekhamitt/circleci-demo-docker:$CIRCLE_SHA1 bash -s" < ./scripts/deploy.sh

